{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","color","onClick","Component","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobot","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34294b38.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n\t// console.log('CardList')\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user,i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card key={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\t// console.log('SearchBox')\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t type='search' \r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={searchChange} />\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n\t<div style={{overflowY:'scroll',border:'5px solid white',height:'800px'}} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count){\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => { \r\n\t\t\treturn {count:this.state.count + 1}\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\t// console.log('CounterButton')\r\n\t\treturn (\r\n\t\t\t<button color = {this.props.color} \r\n\t\t\tonClick={this.updateCount}>\r\n\t\t\tCount :{this.state.count}\r\n\t\t\t</button>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React , { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\trender() {\r\n\t\t// console.log('Header')\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className = 'f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color ={\"red\"} />\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React , { Component }from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\nimport './containers/App.css';\r\nimport Header from './components/Header';\r\n\r\nimport { setSearchField,requestRobots } from './action'\r\n\r\nconst mapStateToProps =  state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\r\n\t}\r\n}\r\n\r\nconst mapDispathToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange,robots,isPending  } = this.props;\r\n\t\tconst filteredRobot = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ? \r\n\t\t<h1> Loading Please Wait </h1> :\r\n\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange ={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobot}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispathToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} \r\nfrom './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype:CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ \r\n\t\ttype: REQUEST_ROBOTS_PENDING\r\n\t})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response =>  response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data }))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} \r\nfrom './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state,{searchField:action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{ isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{ robots: action.payload, isPending:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state,{ error:action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t<App />\n\t</Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}